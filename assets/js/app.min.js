!function (e, t) { "function" == typeof define && define.amd ? define("ev-emitter/ev-emitter", t) : "object" == typeof module && module.exports ? module.exports = t() : e.EvEmitter = t() }("undefined" != typeof window ? window : this, function () { function e() { } var t = e.prototype; return t.on = function (e, t) { if (e && t) { var i = this._events = this._events || {}, n = i[e] = i[e] || []; return n.indexOf(t) == -1 && n.push(t), this } }, t.once = function (e, t) { if (e && t) { this.on(e, t); var i = this._onceEvents = this._onceEvents || {}, n = i[e] = i[e] || {}; return n[t] = !0, this } }, t.off = function (e, t) { var i = this._events && this._events[e]; if (i && i.length) { var n = i.indexOf(t); return n != -1 && i.splice(n, 1), this } }, t.emitEvent = function (e, t) { var i = this._events && this._events[e]; if (i && i.length) { i = i.slice(0), t = t || []; for (var n = this._onceEvents && this._onceEvents[e], o = 0; o < i.length; o++) { var r = i[o], s = n && n[r]; s && (this.off(e, r), delete n[r]), r.apply(this, t) } return this } }, t.allOff = function () { delete this._events, delete this._onceEvents }, e }), function (e, t) { "use strict"; "function" == typeof define && define.amd ? define(["ev-emitter/ev-emitter"], function (i) { return t(e, i) }) : "object" == typeof module && module.exports ? module.exports = t(e, require("ev-emitter")) : e.imagesLoaded = t(e, e.EvEmitter) }("undefined" != typeof window ? window : this, function (e, t) { function i(e, t) { for (var i in t) e[i] = t[i]; return e } function n(e) { if (Array.isArray(e)) return e; var t = "object" == typeof e && "number" == typeof e.length; return t ? d.call(e) : [e] } function o(e, t, r) { if (!(this instanceof o)) return new o(e, t, r); var s = e; return "string" == typeof e && (s = document.querySelectorAll(e)), s ? (this.elements = n(s), this.options = i({}, this.options), "function" == typeof t ? r = t : i(this.options, t), r && this.on("always", r), this.getImages(), h && (this.jqDeferred = new h.Deferred), void setTimeout(this.check.bind(this))) : void a.error("Bad element for imagesLoaded " + (s || e)) } function r(e) { this.img = e } function s(e, t) { this.url = e, this.element = t, this.img = new Image } var h = e.jQuery, a = e.console, d = Array.prototype.slice; o.prototype = Object.create(t.prototype), o.prototype.options = {}, o.prototype.getImages = function () { this.images = [], this.elements.forEach(this.addElementImages, this) }, o.prototype.addElementImages = function (e) { "IMG" == e.nodeName && this.addImage(e), this.options.background === !0 && this.addElementBackgroundImages(e); var t = e.nodeType; if (t && u[t]) { for (var i = e.querySelectorAll("img"), n = 0; n < i.length; n++) { var o = i[n]; this.addImage(o) } if ("string" == typeof this.options.background) { var r = e.querySelectorAll(this.options.background); for (n = 0; n < r.length; n++) { var s = r[n]; this.addElementBackgroundImages(s) } } } }; var u = { 1: !0, 9: !0, 11: !0 }; return o.prototype.addElementBackgroundImages = function (e) { var t = getComputedStyle(e); if (t) for (var i = /url\((['"])?(.*?)\1\)/gi, n = i.exec(t.backgroundImage); null !== n;) { var o = n && n[2]; o && this.addBackground(o, e), n = i.exec(t.backgroundImage) } }, o.prototype.addImage = function (e) { var t = new r(e); this.images.push(t) }, o.prototype.addBackground = function (e, t) { var i = new s(e, t); this.images.push(i) }, o.prototype.check = function () { function e(e, i, n) { setTimeout(function () { t.progress(e, i, n) }) } var t = this; return this.progressedCount = 0, this.hasAnyBroken = !1, this.images.length ? void this.images.forEach(function (t) { t.once("progress", e), t.check() }) : void this.complete() }, o.prototype.progress = function (e, t, i) { this.progressedCount++, this.hasAnyBroken = this.hasAnyBroken || !e.isLoaded, this.emitEvent("progress", [this, e, t]), this.jqDeferred && this.jqDeferred.notify && this.jqDeferred.notify(this, e), this.progressedCount == this.images.length && this.complete(), this.options.debug && a && a.log("progress: " + i, e, t) }, o.prototype.complete = function () { var e = this.hasAnyBroken ? "fail" : "done"; if (this.isComplete = !0, this.emitEvent(e, [this]), this.emitEvent("always", [this]), this.jqDeferred) { var t = this.hasAnyBroken ? "reject" : "resolve"; this.jqDeferred[t](this) } }, r.prototype = Object.create(t.prototype), r.prototype.check = function () { var e = this.getIsImageComplete(); return e ? void this.confirm(0 !== this.img.naturalWidth, "naturalWidth") : (this.proxyImage = new Image, this.proxyImage.addEventListener("load", this), this.proxyImage.addEventListener("error", this), this.img.addEventListener("load", this), this.img.addEventListener("error", this), void (this.proxyImage.src = this.img.src)) }, r.prototype.getIsImageComplete = function () { return this.img.complete && this.img.naturalWidth }, r.prototype.confirm = function (e, t) { this.isLoaded = e, this.emitEvent("progress", [this, this.img, t]) }, r.prototype.handleEvent = function (e) { var t = "on" + e.type; this[t] && this[t](e) }, r.prototype.onload = function () { this.confirm(!0, "onload"), this.unbindEvents() }, r.prototype.onerror = function () { this.confirm(!1, "onerror"), this.unbindEvents() }, r.prototype.unbindEvents = function () { this.proxyImage.removeEventListener("load", this), this.proxyImage.removeEventListener("error", this), this.img.removeEventListener("load", this), this.img.removeEventListener("error", this) }, s.prototype = Object.create(r.prototype), s.prototype.check = function () { this.img.addEventListener("load", this), this.img.addEventListener("error", this), this.img.src = this.url; var e = this.getIsImageComplete(); e && (this.confirm(0 !== this.img.naturalWidth, "naturalWidth"), this.unbindEvents()) }, s.prototype.unbindEvents = function () { this.img.removeEventListener("load", this), this.img.removeEventListener("error", this) }, s.prototype.confirm = function (e, t) { this.isLoaded = e, this.emitEvent("progress", [this, this.element, t]) }, o.makeJQueryPlugin = function (t) { t = t || e.jQuery, t && (h = t, h.fn.imagesLoaded = function (e, t) { var i = new o(this, e, t); return i.jqDeferred.promise(h(this)) }) }, o.makeJQueryPlugin(), o });

const ready = callback => {
	if (document.readyState !== "loading") {
		callback();
	} else {
		document.addEventListener("DOMContentLoaded", callback);
	}
};

let isMobile = false;

if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)
	|| /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0, 4))) {
	isMobile = true;
}
function siteFooterAbsolute() {
    const siteFooter = document.getElementById("siteFooter");
    const siteWrapper = document.getElementById("siteWrapper");

    if (siteFooter) {
        let elHeight = siteFooter.offsetHeight;
        siteWrapper.style.paddingBottom = `${elHeight}px`;
    }
}

imagesLoaded(document.querySelector("body"), instance => {
    siteFooterAbsolute();
    fadeInSiteFooter();
});

window.addEventListener('resize', siteFooterAbsolute);

function fadeInSiteFooter() {
    const siteFooter = document.getElementById("siteFooter");
    siteFooter.style.opacity = 0;

    setTimeout(() => {
        siteFooter.style.transition = 'opacity 0.5s';
        siteFooter.style.opacity = 1;
    }, 500);
}


function initializeBreakIt() {
    const breakItElement = document.querySelector('[class^="breakit"]');

    function setBreakItHeight() {
        const breakItElements = document.querySelectorAll('[class^="breakit"]');
        const breakItList = Array.from(breakItElements);

        breakItList.forEach(element => {
            const brokenElement = element.querySelector('[class^="brokeit"]');
            const elementHeight = brokenElement.offsetHeight;

            element.style.height = `${elementHeight}px`;

        });
    }

    setBreakItHeight();
}

let tweetBlocksInitialized = false;

function initializeTweetBlocks() {
    if (!tweetBlocksInitialized) {
        const tweetBlocks = document.querySelectorAll('.tweet-block');

        tweetBlocks.forEach(tweetBlock => {
            setTimeout(() => {
                initializeBreakIt();
            }, 2000);
        });

        tweetBlocksInitialized = true;
    }
}

let vh = window.innerHeight * 0.01;
document.documentElement.style.setProperty('--vh', `${vh}px`);

window.addEventListener('resize', () => {
    let vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
});

const addActiveClass = () => {
    const currentURL = window.location.href;

    const menuItems = document.querySelector('.menu').getElementsByTagName('a');

    for (let menuItem of menuItems) {
        const menuItemURL = menuItem.getAttribute('href');

        if (currentURL.includes(menuItemURL)) {
            menuItem.parentNode.classList.add('active');
        }
    }
};

addActiveClass();

function setGridSectionHeight() {
    const gridSectionInner = document.querySelector('.grid-section--inner');
    if (!gridSectionInner) return;

    const setHeight = () => {
        const windowHeight = window.innerHeight;
        const gridSectionHeight = gridSectionInner.offsetHeight;
        const newHeight = Math.max(gridSectionHeight);
        gridSectionInner.style.setProperty('--grid-section-height', `${newHeight}px`);
    };

    const handleResize = () => {
        const windowWidth = window.innerWidth;
        if (windowWidth >= 1200) {
            setHeight();
        } else {
            gridSectionInner.style.setProperty('--grid-section-height', 'auto');
        }
    };

    window.addEventListener('resize', handleResize);
    handleResize();
}


function initializeFAQ() {
    const faqContainer = document.querySelector('.faq-container');
    if (!faqContainer) return;

    const buttons = faqContainer.querySelectorAll('.faq-question');
    if (!buttons.length) return;

    let focusedIndex = -1;

    function toggleAnswer(button) {
        const answerId = button.getAttribute('aria-controls');
        const answerElement = document.getElementById(answerId);
        const expanded = button.getAttribute('aria-expanded') === 'true';

        button.setAttribute('aria-expanded', !expanded);

        if (answerElement) {
            answerElement.style.display = expanded ? 'none' : 'block';
            const faqWrapper = button.closest('.faq-wrapper');
            if (faqWrapper) {
                faqWrapper.classList.toggle('is-active', !expanded);
            }
        }
    }



    function handleButtonKeydown(event) {
        const key = event.key;
        const button = this;

        if (key === 'Enter' || key === ' ') {
            event.preventDefault();
            toggleAnswer(button);
        }

        if (key === 'ArrowDown') {
            event.preventDefault();
            const nextIndex = focusedIndex + 1;

            if (nextIndex < buttons.length) {
                buttons[nextIndex].focus();
            }
        }

        if (key === 'ArrowUp') {
            event.preventDefault();
            const prevIndex = focusedIndex - 1;

            if (prevIndex >= 0) {
                buttons[prevIndex].focus();
            }
        }
    }

    function handleButtonFocus() {
        focusedIndex = Array.from(buttons).indexOf(this);
        buttons.forEach((button) => button.classList.remove('focus'));
        this.classList.add('focus');
    }

    buttons.forEach((button) => {
        const answerId = button.getAttribute('aria-controls');
        const answerElement = document.getElementById(answerId);
        console.log(answerId);

        button.addEventListener('click', () => toggleAnswer(button));
        button.addEventListener('keydown', handleButtonKeydown);
        button.addEventListener('focus', handleButtonFocus);

        button.addEventListener('keydown', (event) => {
            if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {
                event.preventDefault();
            }
        });

        if (answerElement) {
            answerElement.style.display = 'none';

            button.setAttribute('role', 'button');
            button.setAttribute('aria-expanded', 'false');
            button.setAttribute('aria-controls', answerId);
            answerElement.setAttribute('role', 'region');
            answerElement.setAttribute('aria-hidden', 'true');
        }
    });

}

initializeFAQ();

document.addEventListener("DOMContentLoaded", function() {
    try {
        const tabButtons = document.querySelectorAll(".grid-radar--links button");
        const tabs = document.querySelectorAll(".grid-radar--tab");
        let activeTab;

        if (!tabButtons || !tabs) {
            throw new Error("Tab buttons or tabs not found.");
        }

        tabButtons.forEach(function(button) {
            const tabId = button.getAttribute("data-tab");
            const tab = document.querySelector(tabId);
            const toggleIcon = button.querySelector('.toggle-icon');

            if (!tab || !toggleIcon) {
                throw new Error("Tab or toggle icon not found.");
            }

            button.setAttribute("role", "tab");
            button.setAttribute("aria-selected", "false");
            tab.setAttribute("role", "tabpanel");
            tab.setAttribute("aria-hidden", "true");

            button.addEventListener("click", function(e) {
                e.preventDefault();

                if (activeTab) {
                    activeTab.classList.remove("active");
                    activeTab.setAttribute("aria-hidden", "true");
                    activeTab.setAttribute("aria-selected", "false");
                }

                tabButtons.forEach(function(btn) {
                    btn.setAttribute("aria-selected", "false");
                });

                if (activeTab === tab) {
                    activeTab = null;
                    toggleIcon.classList.remove("rotate");
                } else {
                    activeTab = tab;
                    activeTab.classList.add("active");
                    activeTab.setAttribute("aria-hidden", "false");
                    button.setAttribute("aria-selected", "true");
                    toggleIcon.classList.add("rotate");
                }
            });
        });

        const firstTabButton = tabButtons[0];
        if (firstTabButton) {
            firstTabButton.click();
        }
    } catch (error) {
        console.error("An error occurred:", error);
    }
});

(function() {
    function rearrangeMetaInsideHeader() {
        const articles = document.querySelectorAll('.grid-article[data-style="1"]');

        articles.forEach((article) => {
            const metaDiv = article.querySelector('.grid-article--meta');
            const header = article.querySelector('.grid-article--header');
            const title = header.querySelector('.grid-article--title');

            if (metaDiv && header && title) {
                header.insertBefore(metaDiv, title.nextElementSibling);
            }
        });
    }

    function adjustFigureHeight() {
        const articles = document.querySelectorAll('.grid-article[data-style="1"]');

        articles.forEach((article) => {
            const header = article.querySelector('.grid-article--header');
            const figure = article.querySelector('.grid-article--figure');

            if (header && figure) {
                let headerHeight = header.offsetHeight;

                if (article.dataset.size === "xs") {
                    headerHeight -= 24;
                }

                if (article.dataset.size === "lg") {
                    headerHeight = 150;
                }

                const adjustedHeight = headerHeight + 48;

                figure.style.height = `${adjustedHeight}px`;
            }
        });
    }

    rearrangeMetaInsideHeader();
    adjustFigureHeight();

    document.addEventListener('DOMContentLoaded', function() {
        const articles = document.querySelectorAll('.grid-article');
        articles.forEach((article) => {
            article.classList.add('is-ready');
        });
    });
})();

class Pagination {
    constructor(
        containerElement,
        itemSelector,
        itemsPerPage = 5,
        prevLabel = "",
        nextLabel = ""
    ) {
        this.containerElement = containerElement;
        this.items = Array.from(containerElement.querySelectorAll(itemSelector));
        this.isMobile = window.innerWidth <= 767;
        this.itemsPerPage = itemsPerPage;
        this.prevLabel = prevLabel;
        this.nextLabel = nextLabel;
        this.totalPages = Math.ceil(this.items.length / this.itemsPerPage);
        this.currentPage = 1;

        if (this.items.length < this.itemsPerPage || this.totalPages === 1) {
            return;
        }

        const paginationMarkup = this.generatePaginationMarkup(
            this.totalPages,
            this.prevLabel,
            this.nextLabel
        );
        this.containerElement.insertAdjacentHTML("afterend", paginationMarkup);

        this.paginationContainer = this.containerElement.nextElementSibling;
        this.prevBtn = this.paginationContainer.querySelector(".prev");
        this.nextBtn = this.paginationContainer.querySelector(".next");
        this.pageBtns = this.paginationContainer.querySelectorAll(".page");

        this.showPage(1);

        this.paginationContainer.addEventListener("click", (e) =>
            this.handleClick(e)
        );
        this.paginationContainer.addEventListener("keydown", (e) =>
            this.handleKeyPress(e)
        );
    }

    handleClick(event) {
        const target = event.target;

        if (target.classList.contains("page")) {
            this.showPage(parseInt(target.dataset.page));
        } else if (target.classList.contains("prev")) {
            this.showPage(this.currentPage - 1);
        } else if (target.classList.contains("next")) {
            this.showPage(this.currentPage + 1);
        }
    }
    handleKeyPress(event) {
        if (event.key === "ArrowLeft" && this.currentPage > 1) {
            this.showPage(this.currentPage - 1);
            this.prevBtn.focus();
        } else if (event.key === "ArrowRight" && this.currentPage < this.totalPages) {
            this.showPage(this.currentPage + 1);
            this.nextBtn.focus();
        }
    }
    generatePaginationMarkup(totalPages, prevLabel, nextLabel) {
        const pageButtonsMarkup = [];
        const currentPage = this.currentPage;

        const addPageButtonMarkup = (
            pageNumber,
            isCurrentPage = false,
            showIcon = false
        ) => {
            const currentClass = isCurrentPage ? "current" : "";
            const ariaCurrent = isCurrentPage ? "true" : "false";
            const label =
                pageNumber === 0 ? prevLabel : pageNumber === -1 ? nextLabel : pageNumber;

            pageButtonsMarkup.push(`
					  <li>
							<button class="page ${currentClass}"
								 data-page="${pageNumber}"
								 aria-current="${ariaCurrent}"
								 aria-label="Page ${pageNumber}">
								 ${label}
							</button>
					  </li>
				 `);
        };

        const prevBtnMarkup = `<button class="prev ${!prevLabel ? "prev-no-label" : ""}" aria-label="Previous">
			<i class="arrow-left-icon"></i>${prevLabel ? prevLabel : ""}
		</button>`;
        pageButtonsMarkup.push(`<li>${prevBtnMarkup}</li>`);

        let firstPageToShow;
        let lastPageToShow;
        if (this.isMobile) {
            const increment = 2;
            firstPageToShow = Math.max(currentPage - increment, 1);
            lastPageToShow = Math.min(currentPage + increment, totalPages);
        } else {
            if (currentPage <= 5) {
                firstPageToShow = 1;
                lastPageToShow = Math.min(5, totalPages);
            } else {
                firstPageToShow = currentPage - 1;
                lastPageToShow = Math.min(currentPage + 3, totalPages);
            }
        }

        if (firstPageToShow > 1) {
            pageButtonsMarkup.push(`<li><span class="ellipsis">...</span></li>`);
        }

        for (
            let pageNumber = firstPageToShow; pageNumber <= lastPageToShow; pageNumber++
        ) {
            addPageButtonMarkup(pageNumber, pageNumber === currentPage, this.isMobile);
        }

        if (lastPageToShow < totalPages) {
            pageButtonsMarkup.push(`<li><span class="ellipsis">...</span></li>`);
        }

        const nextBtnMarkup = `<button class="next ${!nextLabel ? "next-no-label" : ""}" aria-label="Next">
			${nextLabel ? nextLabel : ""}<i class="arrow-right-icon"></i>
		</button>`;
        pageButtonsMarkup.push(`<li>${nextBtnMarkup}</li>`);

        return `
			<nav class="pagination" aria-label="Pagination">
				 <ul class="pagination__list">
					  ${pageButtonsMarkup.join("")}
				 </ul>
			</nav>
			`;
    }

    showPage(page) {
        this.currentPage = Math.max(page, 1);
        const start = (this.currentPage - 1) * this.itemsPerPage;
        const end = start + this.itemsPerPage;

        this.items.forEach((item, index) => {
            item.setAttribute("aria-hidden", index < start || index >= end);
        });

        this.paginationContainer.innerHTML = this.generatePaginationMarkup(
            this.totalPages,
            this.prevLabel,
            this.nextLabel
        );

        if (this.currentPage > 5) {
            const activeItemIndex = (this.currentPage - 1) % this.itemsPerPage;
            const activeItem = this.items[activeItemIndex];
            activeItem.classList.add("active");
            activeItem.scrollIntoView();
        }

        this.pageBtns = this.paginationContainer.querySelectorAll(".page");
        this.pageBtns.forEach((btn) => {
            const pageNumber = parseInt(btn.dataset.page);
            const isCurrentPage = pageNumber === this.currentPage;
            this.toggleButton(btn, isCurrentPage, isCurrentPage);
        });

        this.prevBtn = this.paginationContainer.querySelector(".prev");
        this.nextBtn = this.paginationContainer.querySelector(".next");

        this.prevBtn.disabled = this.currentPage === 1;
        this.nextBtn.disabled = this.currentPage === this.totalPages;

        this.toggleButton(this.prevBtn, this.prevBtn.disabled);
        this.toggleButton(this.nextBtn, this.nextBtn.disabled);
    }


    toggleButton(btn, disabled, isCurrentPage = false) {
        btn.disabled = disabled;
        btn.classList.toggle("current", isCurrentPage);
        btn.setAttribute("aria-current", isCurrentPage ? "true" : "false");
        if (isCurrentPage) {
            btn.focus();
        }
    }
}

function initializePressroomPagination() {

    const containerSelector = ".grid-article--container";
    const itemSelector = ".grid-article";
    let itemsPerPage = 5;
    const prevLabel = "Previous";
    const nextLabel = "Next";

    const containerElements = Array.from(
        document.querySelectorAll(containerSelector)
    );

    if (!containerElements.length) {
        return;
    }

    containerElements.forEach((containerElement) => {
        itemsPerPage = containerElement.dataset.pagination || itemsPerPage;
        new Pagination(
            containerElement,
            itemSelector,
            itemsPerPage,
            prevLabel,
            nextLabel
        );
    });

    setGridSectionHeight();
}

document.addEventListener("DOMContentLoaded", initializePressroomPagination);
document.addEventListener("DOMContentLoaded", initializeBreakIt);
document.addEventListener("DOMContentLoaded", initializeTweetBlocks);

window.addEventListener('resize', initializeBreakIt);
window.addEventListener('resize', initializeTweetBlocks);
